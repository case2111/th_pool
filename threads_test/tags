!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARPING_STRUCT	threads_arping.h	/^} ARPING_STRUCT;$/;"	t	typeref:struct:_ARPING_STRUCT
CGR_CHAR	threads_arping.h	/^typedef char                        CGR_CHAR;$/;"	t
CGR_DEVICE_ARP_MSG	threads_arping.h	/^struct CGR_DEVICE_ARP_MSG$/;"	s
CGR_DOUBLE	threads_arping.h	/^typedef double                      CGR_DOUBLE;$/;"	t
CGR_FLOAT	threads_arping.h	/^typedef float                       CGR_FLOAT;$/;"	t
CGR_INT	threads_arping.h	/^typedef int32_t                     CGR_INT;$/;"	t
CGR_INT16	threads_arping.h	/^typedef int16_t                     CGR_INT16;$/;"	t
CGR_INT32	threads_arping.h	/^typedef int32_t                     CGR_INT32;$/;"	t
CGR_INT64	threads_arping.h	/^typedef int64_t                     CGR_INT64;$/;"	t
CGR_INT8	threads_arping.h	/^typedef int8_t                      CGR_INT8;$/;"	t
CGR_LONG	threads_arping.h	/^typedef long                        CGR_LONG;$/;"	t
CGR_LONG_LONG	threads_arping.h	/^typedef int64_t                     CGR_LONG_LONG;$/;"	t
CGR_UCHAR	threads_arping.h	/^typedef unsigned char               CGR_UCHAR;$/;"	t
CGR_UINT	threads_arping.h	/^typedef uint32_t                    CGR_UINT;$/;"	t
CGR_UINT16	threads_arping.h	/^typedef uint16_t                    CGR_UINT16;$/;"	t
CGR_UINT32	threads_arping.h	/^typedef uint32_t                    CGR_UINT32;$/;"	t
CGR_UINT64	threads_arping.h	/^typedef uint64_t                    CGR_UINT64;$/;"	t
CGR_UINT8	threads_arping.h	/^typedef uint8_t                     CGR_UINT8;$/;"	t
CGR_ULONG	threads_arping.h	/^typedef unsigned long               CGR_ULONG;$/;"	t
CGR_ULON_GLONG	threads_arping.h	/^typedef uint64_t                    CGR_ULON_GLONG;$/;"	t
CGR_VOID	threads_arping.h	/^typedef void                        CGR_VOID;$/;"	t
CgrDeviceArping	threads_arping.c	/^static CGR_INT CgrDeviceArping$/;"	f	file:
CgrDeviceConvertMacStringToHex	threads_arping.c	/^static void CgrDeviceConvertMacStringToHex$/;"	f	file:
CgrStrNCpy	threads_arping.c	/^CGR_CHAR *CgrStrNCpy$/;"	f
DEBUGERROR_DEVICE	threads_arping.h	52;"	d
DEBUGINFO_DEVICE	threads_arping.h	53;"	d
DEVICE_STRUCT	threads_arping.h	/^} DEVICE_STRUCT;$/;"	t	typeref:struct:_DEVICE_STRUCT
GetRemoteIpMac	threads_arping.c	/^static GetRemoteIpMac(IP_MAC *s_ip_mac)$/;"	f	file:
IN	threads_arping.h	55;"	d
INOUT	threads_arping.h	54;"	d
IP_MAC	threads_arping.h	/^} IP_MAC;$/;"	t	typeref:struct:_IP_MAC
MAC_BCAST_ADDR	threads_arping.h	57;"	d
OUT	threads_arping.h	56;"	d
PCGR_CHAR	threads_arping.h	/^typedef CGR_CHAR                   *PCGR_CHAR;$/;"	t
PCGR_DOUBLE	threads_arping.h	/^typedef CGR_DOUBLE                 *PCGR_DOUBLE;$/;"	t
PCGR_FLOAT	threads_arping.h	/^typedef CGR_FLOAT                  *PCGR_FLOAT;$/;"	t
PCGR_INT	threads_arping.h	/^typedef CGR_INT                    *PCGR_INT;$/;"	t
PCGR_INT16	threads_arping.h	/^typedef CGR_INT16                  *PCGR_INT16;$/;"	t
PCGR_INT32	threads_arping.h	/^typedef CGR_INT32                  *PCGR_INT32;$/;"	t
PCGR_INT8	threads_arping.h	/^typedef CGR_INT8                   *PCGR_INT8;$/;"	t
PCGR_LONG	threads_arping.h	/^typedef CGR_LONG                   *PCGR_LONG;$/;"	t
PCGR_LONG_LONG	threads_arping.h	/^typedef CGR_LONG_LONG              *PCGR_LONG_LONG;$/;"	t
PCGR_UCHAR	threads_arping.h	/^typedef CGR_UCHAR                  *PCGR_UCHAR;$/;"	t
PCGR_UINT	threads_arping.h	/^typedef CGR_UINT                   *PCGR_UINT;$/;"	t
PCGR_UINT32	threads_arping.h	/^typedef CGR_UINT32                 *PCGR_UINT32;$/;"	t
PCGR_UINT64	threads_arping.h	/^typedef CGR_UINT64                 *PCGR_UINT64;$/;"	t
PCGR_UINT8	threads_arping.h	/^typedef CGR_UINT8                  *PCGR_UINT8;$/;"	t
PCGR_ULONG	threads_arping.h	/^typedef CGR_ULONG                  *PCGR_ULONG;$/;"	t
PCGR_ULON_GLONG	threads_arping.h	/^typedef CGR_ULON_GLONG             *PCGR_ULON_GLONG;$/;"	t
PCGR_VOID	threads_arping.h	/^typedef CGR_VOID                   *PCGR_VOID;$/;"	t
THREAD_INFO	threads_pool.h	/^typedef struct _THREAD_INFO  THREAD_INFO;$/;"	t	typeref:struct:_THREAD_INFO
THREAD_POOL	threads_pool.h	/^typedef struct _THREAD_POOL  THREAD_POOL;$/;"	t	typeref:struct:_THREAD_POOL
_ARPING_STRUCT	threads_arping.h	/^typedef struct _ARPING_STRUCT$/;"	s
_DEVICE_STRUCT	threads_arping.h	/^typedef struct _DEVICE_STRUCT$/;"	s
_IP_MAC	threads_arping.h	/^typedef struct _IP_MAC$/;"	s
_THREAD_INFO	threads_pool.h	/^struct _THREAD_INFO$/;"	s
_THREAD_POOL	threads_pool.h	/^struct _THREAD_POOL$/;"	s
_WORK_PROCESS	threads_pool.h	/^struct _WORK_PROCESS$/;"	s
__APINGT_TEST__	threads_arping.h	2;"	d
__THREAD_POOL__	threads_pool.h	2;"	d
add_job	threads_pool.c	/^void add_job(THREAD_POOL *pool, void *thread_work, void *args)$/;"	f
add_thread	threads_pool.c	/^static int add_thread(THREAD_POOL *pool)$/;"	f	file:
busy_status	threads_pool.h	/^    int            busy_status;$/;"	m	struct:_THREAD_INFO
close_thread_pool	threads_pool.c	/^void close_thread_pool(THREAD_POOL *pool)$/;"	f
creat_thread_pool	threads_pool.c	/^THREAD_POOL *creat_thread_pool(int min_num, int max_num)$/;"	f
cur_th_num	threads_pool.h	/^    int cur_th_num;$/;"	m	struct:_THREAD_POOL
delete_thread	threads_pool.c	/^static int delete_thread(THREAD_POOL *pool)$/;"	f	file:
ethhdr	threads_arping.h	/^    struct ethhdr   ethhdr;         \/* Ethernet header                          *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG	typeref:struct:CGR_DEVICE_ARP_MSG::ethhdr
hlen	threads_arping.h	/^    CGR_UCHAR       hlen;           \/* hardware address length (must be 6)      *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
htype	threads_arping.h	/^    CGR_UINT16      htype;          \/* hardware type (must be ARPHRD_ETHER)     *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
init_thread_pool	threads_pool.c	/^int init_thread_pool(THREAD_POOL *pool)$/;"	f
interface	threads_arping.h	/^    char interface[32];$/;"	m	struct:_DEVICE_STRUCT
job_arg	threads_pool.h	/^    void    *job_arg;$/;"	m	struct:_THREAD_INFO
local_ip	threads_arping.h	/^    CGR_UINT32 local_ip;$/;"	m	struct:_DEVICE_STRUCT
local_mac	threads_arping.h	/^    char local_mac[32];$/;"	m	struct:_DEVICE_STRUCT
main	threads_arping.c	/^void main(void)$/;"	f
manage_thread	threads_pool.c	/^static void *manage_thread(void *pthread)$/;"	f	file:
manage_thread_id	threads_pool.h	/^    pthread_t manage_thread_id;$/;"	m	struct:_THREAD_POOL
max_th_num	threads_pool.h	/^    int max_th_num;$/;"	m	struct:_THREAD_POOL
min_th_num	threads_pool.h	/^    int min_th_num;$/;"	m	struct:_THREAD_POOL
operation	threads_arping.h	/^    CGR_UINT16      operation;      \/* ARP opcode                               *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
pad	threads_arping.h	/^    CGR_UCHAR       pad[18];        \/* pad for min. Ethernet payload (60 bytes) *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
pdevice	threads_arping.h	/^    DEVICE_STRUCT *pdevice;$/;"	m	struct:_ARPING_STRUCT
plen	threads_arping.h	/^    CGR_UCHAR       plen;           \/* protocol address length (must be 4)      *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
pool_lock	threads_pool.h	/^    pthread_mutex_t pool_lock;$/;"	m	struct:_THREAD_POOL
process_job	threads_pool.h	/^    void (*process_job)(void *arg);$/;"	m	struct:_WORK_PROCESS
process_work	threads_pool.h	/^    void (*process_work)(void *);$/;"	m	struct:_THREAD_INFO
ptype	threads_arping.h	/^    CGR_UINT16      ptype;          \/* protocol type (must be ETH_P_IP)         *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
remote_ip	threads_arping.h	/^    CGR_UINT32 remote_ip;$/;"	m	struct:_ARPING_STRUCT
remote_mac	threads_arping.h	/^    char *remote_mac;$/;"	m	struct:_ARPING_STRUCT
sHaddr	threads_arping.h	/^    CGR_UCHAR       sHaddr[6];      \/* sender's hardware address                *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
sInaddr	threads_arping.h	/^    CGR_UCHAR       sInaddr[4];     \/* sender's IP address                      *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
s_ip	threads_arping.h	/^    char s_ip[32];$/;"	m	struct:_IP_MAC
s_mac	threads_arping.h	/^    char s_mac[32];$/;"	m	struct:_IP_MAC
status	threads_arping.h	/^    int  status;$/;"	m	struct:_IP_MAC
status	threads_arping.h	/^    int status;$/;"	m	struct:_ARPING_STRUCT
tHaddr	threads_arping.h	/^    CGR_UCHAR       tHaddr[6];      \/* target's hardware address                *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
tInaddr	threads_arping.h	/^    CGR_UCHAR       tInaddr[4];     \/* target's IP address                      *\/$/;"	m	struct:CGR_DEVICE_ARP_MSG
thread_cond	threads_pool.h	/^    pthread_cond_t        thread_cond;$/;"	m	struct:_THREAD_INFO
thread_debug	threads_pool.h	11;"	d
thread_id	threads_pool.h	/^    pthread_t    thread_id;$/;"	m	struct:_THREAD_INFO
thread_info	threads_pool.h	/^    THREAD_INFO *thread_info;$/;"	m	struct:_THREAD_POOL
thread_lock	threads_pool.h	/^    pthread_mutex_t        thread_lock;$/;"	m	struct:_THREAD_INFO
thread_status	threads_arping.h	/^    int thread_status;$/;"	m	struct:_ARPING_STRUCT
work_thread	threads_pool.c	/^static void *work_thread(void *pthread)$/;"	f	file:
