!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARPING_ERR	threads_arping.h	/^enum ARPING_STATUS {ARPING_ONLINE=0, ARPING_OFFLINE, ARPING_ERR};$/;"	e	enum:ARPING_STATUS
ARPING_OFFLINE	threads_arping.h	/^enum ARPING_STATUS {ARPING_ONLINE=0, ARPING_OFFLINE, ARPING_ERR};$/;"	e	enum:ARPING_STATUS
ARPING_ONLINE	threads_arping.h	/^enum ARPING_STATUS {ARPING_ONLINE=0, ARPING_OFFLINE, ARPING_ERR};$/;"	e	enum:ARPING_STATUS
ARPING_STATUS	threads_arping.h	/^enum ARPING_STATUS {ARPING_ONLINE=0, ARPING_OFFLINE, ARPING_ERR};$/;"	g
ARPING_STRUCT	threads_arping.h	/^} ARPING_STRUCT;$/;"	t	typeref:struct:_ARPING_STRUCT
CHAR	threads_arping.h	/^typedef char                        CHAR;$/;"	t
DEBUGERROR_ARPING	threads_arping.h	33;"	d
DEBUGINFO_ARPING	threads_arping.h	34;"	d
DEVICE_ARP_MSG	threads_arping.h	/^struct DEVICE_ARP_MSG$/;"	s
DEVICE_STRUCT	threads_arping.h	/^} DEVICE_STRUCT;$/;"	t	typeref:struct:_DEVICE_STRUCT
DOUBLE	threads_arping.h	/^typedef double                      DOUBLE;$/;"	t
DeviceArping	threads_arping.c	/^static void DeviceArping$/;"	f	file:
DeviceConvertMacStringToHex	threads_arping.c	/^static void DeviceConvertMacStringToHex$/;"	f	file:
FLOAT	threads_arping.h	/^typedef float                       FLOAT;$/;"	t
GetLocalMacAndIp	threads_arping.c	/^int GetLocalMacAndIp(char *iface_name, char *local_mac, char *local_ip)$/;"	f
GetRemoteIpMac	threads_arping.c	/^static GetRemoteIpMac(IP_MAC *s_ip_mac)$/;"	f	file:
IN	threads_arping.h	37;"	d
INOUT	threads_arping.h	36;"	d
INT	threads_arping.h	/^typedef int32_t                     INT;$/;"	t
INT16	threads_arping.h	/^typedef int16_t                     INT16;$/;"	t
INT32	threads_arping.h	/^typedef int32_t                     INT32;$/;"	t
INT64	threads_arping.h	/^typedef int64_t                     INT64;$/;"	t
INT8	threads_arping.h	/^typedef int8_t                      INT8;$/;"	t
IP_MAC	threads_arping.h	/^} IP_MAC;$/;"	t	typeref:struct:_IP_MAC
LONG	threads_arping.h	/^typedef long                        LONG;$/;"	t
LONG_LONG	threads_arping.h	/^typedef int64_t                     LONG_LONG;$/;"	t
MAC_BCAST_ADDR	threads_arping.h	39;"	d
OUT	threads_arping.h	38;"	d
StrNCpy	threads_arping.c	/^CHAR *StrNCpy$/;"	f
THREAD_INFO	threads_pool.h	/^typedef struct _THREAD_INFO  THREAD_INFO;$/;"	t	typeref:struct:_THREAD_INFO
THREAD_POOL	threads_pool.h	/^typedef struct _THREAD_POOL  THREAD_POOL;$/;"	t	typeref:struct:_THREAD_POOL
TH_BUSY	threads_pool.c	4;"	d	file:
TH_DIED	threads_pool.c	7;"	d	file:
TH_IDLE	threads_pool.c	6;"	d	file:
TH_STACK_SIZE	threads_pool.c	2;"	d	file:
TH_TEMP_BUSY	threads_pool.c	5;"	d	file:
UCHAR	threads_arping.h	/^typedef unsigned char               UCHAR;$/;"	t
UINT	threads_arping.h	/^typedef uint32_t                    UINT;$/;"	t
UINT16	threads_arping.h	/^typedef uint16_t                    UINT16;$/;"	t
UINT32	threads_arping.h	/^typedef uint32_t                    UINT32;$/;"	t
UINT64	threads_arping.h	/^typedef uint64_t                    UINT64;$/;"	t
UINT8	threads_arping.h	/^typedef uint8_t                     UINT8;$/;"	t
ULONG	threads_arping.h	/^typedef unsigned long               ULONG;$/;"	t
ULON_GLONG	threads_arping.h	/^typedef uint64_t                    ULON_GLONG;$/;"	t
VOID	threads_arping.h	/^typedef void                        VOID;$/;"	t
_ARPING_STRUCT	threads_arping.h	/^typedef struct _ARPING_STRUCT$/;"	s
_DEVICE_STRUCT	threads_arping.h	/^typedef struct _DEVICE_STRUCT$/;"	s
_IP_MAC	threads_arping.h	/^typedef struct _IP_MAC$/;"	s
_THREAD_INFO	threads_pool.h	/^struct _THREAD_INFO$/;"	s
_THREAD_POOL	threads_pool.h	/^struct _THREAD_POOL$/;"	s
_WORK_PROCESS	threads_pool.h	/^struct _WORK_PROCESS$/;"	s
__APINGT_TEST__	threads_arping.h	2;"	d
__THREAD_POOL__	threads_pool.h	2;"	d
add_job	threads_pool.c	/^void add_job(THREAD_POOL *pool, void *thread_work, void *args)$/;"	f
add_thread	threads_pool.c	/^static int add_thread(THREAD_INFO *new_thread)$/;"	f	file:
busy_status	threads_pool.h	/^    int            busy_status;$/;"	m	struct:_THREAD_INFO
close_thread_pool	threads_pool.c	/^void close_thread_pool(THREAD_POOL *pool)$/;"	f
creat_thread_pool	threads_pool.c	/^THREAD_POOL *creat_thread_pool(int min_num, int max_num)$/;"	f
cur_th_num	threads_pool.h	/^    int cur_th_num;$/;"	m	struct:_THREAD_POOL
delete_thread	threads_pool.c	/^static int delete_thread(THREAD_POOL *pool)$/;"	f	file:
ethhdr	threads_arping.h	/^    struct ethhdr   ethhdr;         \/* Ethernet header                          *\/$/;"	m	struct:DEVICE_ARP_MSG	typeref:struct:DEVICE_ARP_MSG::ethhdr
hlen	threads_arping.h	/^    UCHAR       hlen;           \/* hardware address length (must be 6)      *\/$/;"	m	struct:DEVICE_ARP_MSG
htype	threads_arping.h	/^    UINT16      htype;          \/* hardware type (must be ARPHRD_ETHER)     *\/$/;"	m	struct:DEVICE_ARP_MSG
init_thread_pool	threads_pool.c	/^int init_thread_pool(THREAD_POOL *pool)$/;"	f
interface	threads_arping.h	/^    char interface[32];$/;"	m	struct:_DEVICE_STRUCT
job_arg	threads_pool.h	/^    void    *job_arg;$/;"	m	struct:_THREAD_INFO
local_ip	threads_arping.h	/^    UINT32 local_ip;$/;"	m	struct:_DEVICE_STRUCT
local_mac	threads_arping.h	/^    char local_mac[32];$/;"	m	struct:_DEVICE_STRUCT
main	threads_arping.c	/^void main(int argc, char *argv[])$/;"	f
manage_thread	threads_pool.c	/^static void *manage_thread(void *pthread)$/;"	f	file:
manage_thread_id	threads_pool.h	/^    pthread_t manage_thread_id;$/;"	m	struct:_THREAD_POOL
max_th_num	threads_pool.h	/^    int max_th_num;$/;"	m	struct:_THREAD_POOL
min_th_num	threads_pool.h	/^    int min_th_num;$/;"	m	struct:_THREAD_POOL
operation	threads_arping.h	/^    UINT16      operation;      \/* ARP opcode                               *\/$/;"	m	struct:DEVICE_ARP_MSG
pad	threads_arping.h	/^    UCHAR       pad[18];        \/* pad for min. Ethernet payload (60 bytes) *\/$/;"	m	struct:DEVICE_ARP_MSG
pdevice	threads_arping.h	/^    DEVICE_STRUCT *pdevice;$/;"	m	struct:_ARPING_STRUCT
plen	threads_arping.h	/^    UCHAR       plen;           \/* protocol address length (must be 4)      *\/$/;"	m	struct:DEVICE_ARP_MSG
pool_lock	threads_pool.h	/^    pthread_mutex_t pool_lock;$/;"	m	struct:_THREAD_POOL
process_job	threads_pool.h	/^    void (*process_job)(void *arg);$/;"	m	struct:_WORK_PROCESS
process_work	threads_pool.h	/^    void (*process_work)(void *);$/;"	m	struct:_THREAD_INFO
ptype	threads_arping.h	/^    UINT16      ptype;          \/* protocol type (must be ETH_P_IP)         *\/$/;"	m	struct:DEVICE_ARP_MSG
remote_ip	threads_arping.h	/^    UINT32 remote_ip;$/;"	m	struct:_ARPING_STRUCT
remote_mac	threads_arping.h	/^    char *remote_mac;$/;"	m	struct:_ARPING_STRUCT
sHaddr	threads_arping.h	/^    UCHAR       sHaddr[6];      \/* sender's hardware address                *\/$/;"	m	struct:DEVICE_ARP_MSG
sInaddr	threads_arping.h	/^    UCHAR       sInaddr[4];     \/* sender's IP address                      *\/$/;"	m	struct:DEVICE_ARP_MSG
s_ip	threads_arping.h	/^    char s_ip[32];$/;"	m	struct:_IP_MAC
s_mac	threads_arping.h	/^    char s_mac[32];$/;"	m	struct:_IP_MAC
status	threads_arping.h	/^    enum ARPING_STATUS status;$/;"	m	struct:_ARPING_STRUCT	typeref:enum:_ARPING_STRUCT::ARPING_STATUS
status	threads_arping.h	/^    int  status;$/;"	m	struct:_IP_MAC
tHaddr	threads_arping.h	/^    UCHAR       tHaddr[6];      \/* target's hardware address                *\/$/;"	m	struct:DEVICE_ARP_MSG
tInaddr	threads_arping.h	/^    UCHAR       tInaddr[4];     \/* target's IP address                      *\/$/;"	m	struct:DEVICE_ARP_MSG
thread_cond	threads_pool.h	/^    pthread_cond_t        thread_cond;$/;"	m	struct:_THREAD_INFO
thread_debug	threads_pool.h	13;"	d
thread_error	threads_pool.h	12;"	d
thread_id	threads_pool.h	/^    pthread_t    thread_id;$/;"	m	struct:_THREAD_INFO
thread_info	threads_pool.h	/^    THREAD_INFO *thread_info;$/;"	m	struct:_THREAD_POOL
thread_lock	threads_pool.h	/^    pthread_mutex_t        thread_lock;$/;"	m	struct:_THREAD_INFO
thread_status	threads_arping.h	/^    int thread_status;$/;"	m	struct:_ARPING_STRUCT
thread_status	threads_pool.c	/^static void thread_status(THREAD_POOL *pool)$/;"	f	file:
work_thread	threads_pool.c	/^static void *work_thread(void *pthread)$/;"	f	file:
